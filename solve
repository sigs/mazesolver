#!/usr/bin/env python

# Stolen from http://stackoverflow.com/questions/12995434/representing-and-solving-a-maze-given-an-image

import sys

from Queue import Queue
from PIL import Image

def iswhite(value):
    #if value == (255,255,255):
    if value[0] > 240:
    	return True

def getadjacent(n):
    x,y = n
    return [(x-1,y),(x,y-1),(x+1,y),(x,y+1)]

def BFS(start, end, pixels):

    queue = Queue()
    queue.put([start]) # Wrapping the start tuple in a list

    while not queue.empty():

        path = queue.get() 
        pixel = path[-1]

        if pixel == end:
            return path

        for adjacent in getadjacent(pixel):
            x,y = adjacent
            if iswhite(pixels[x,y]):
                pixels[x,y] = (127,127,127) # mark visited
                new_path = list(path)
                new_path.append(adjacent)
                queue.put(new_path)

    print "Queue has been exhausted. No answer was found."
    return []

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("\tUsage: solve <mazefile> <outputfile>")
        print("\t\tFiles should be image bitmaps (.jpg, .png, etc.)")
        sys.exit(1)
        
    base_img = Image.open(sys.argv[1])
    w, h = base_img.size
    if len(sys.argv) > 6:
        start = (int(sys.argv[3], 10), int(sys.argv[4], 10))
        end   = (int(sys.argv[5], 10), int(sys.argv[6], 10))
    else:
        start = (int(w/2), 1)
        end   = (int(w/2), h-2)
    base_pixels = base_img.load()
    
    # draw border, just in case; also no need to check in getadjacent  ;)
    for x in range(w):
        base_pixels[x, 0] = (0, 0, 0)
        base_pixels[x, h-1] = (0, 0, 0)
    for y in range(h):
        base_pixels[0, y] = (0, 0, 0)
        base_pixels[w-1, y] = (0, 0, 0)

    path = BFS(start, end, base_pixels)

    path_img = Image.open(sys.argv[1])
    path_pixels = path_img.load()

    for position in path:
        x,y = position
        path_pixels[x,y] = (255,0,0) # red

    path_img.save(sys.argv[2])

